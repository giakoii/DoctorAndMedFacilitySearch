@using System.Net.Http.Json
@using BusinessLogic.Services
@using BusinessLogic.ViewModels
@using DataAccessObject.Models
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IBaseService<MedicalFacility, int, VwMedicalFacility> MedicalFacilityService

<div class="search-container">
    <input @bind="SearchQuery" type="text" class="search-input" placeholder="Search Medical facility, Doctor, . . .">
    <button class="search-button" @onclick="SearchDoctor">Search</button>
    <button class="btn btn-primary btn-find-nearby" @onclick="GetUserLocation">Find Medical facility nearby</button>
</div>

<div class="container mt-3">
    @if (MedicalFacilityViewModels.Count > 0)
    {
        <div>
            @foreach (var facility in MedicalFacilityViewModels)
            {
                <p><strong>@facility.Name</strong> - @facility.Address</p>
            }
        </div>
    }
    else if (IsSearching)
    {
        <p>Đang tìm kiếm cơ sở y tế gần bạn...</p>
    }
    else
    {
        <p>Không tìm thấy cơ sở y tế gần bạn.</p>
    }
</div>

@code {
    private bool IsSearching { get; set; } = false;
    private string SearchQuery { get; set; } = "";
    private List<MedicalFacilityViewModel> MedicalFacilityViewModels { get; set; } = new();

    private double Lat { get; set; }
    private double Lon { get; set; }
    private string Address { get; set; } = "Loading...";

    private async Task GetUserLocation()
    {
        var dotNetRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("getUserLocation", dotNetRef);
        IsSearching = true;
    }

    [JSInvokable]
    public async Task ReceiveLocation(double lat, double lon)
    {
        Lat = lat;
        Lon = lon;
        await GetAddressAsync();
    }

    private async Task GetAddressAsync()
    {
        string url = $"https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat={Lat}&lon={Lon}";
        var response = await Http.GetStringAsync(url);

        var json = System.Text.Json.JsonDocument.Parse(response);
        Address = json.RootElement.GetProperty("display_name").GetString() ?? "Không thể tìm địa chỉ";

        MedicalFacilityViewModels = FindMedicalFacilitiesNearby(Address);
        IsSearching = false;
        StateHasChanged();
    }

    private List<MedicalFacilityViewModel> FindMedicalFacilitiesNearby(string address)
    {
        return MedicalFacilityService.FindView(x => x.Address.Contains(address))
            .Select(x => new MedicalFacilityViewModel
            {
                FacilityId = x.FacilityId,
                Name = x.Name,
                Address = x.Address,
                Phone = x.Phone,
                Email = x.Email,
                Services = x.Services,
                OpeningHours = x.OpeningHours,
                Rating = x.Rating
            })
            .ToList();
    }
}