@page
@model Application.Pages.Schedules.ScheduleModel 
@{
    ViewData["Title"] = "Doctor Schedules"; Layout = "_LayoutAlternative";
}
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
      /* Your existing styles remain unchanged */
      body {
        font-family: 'Roboto', Arial, sans-serif;
        background-color: #f7f9fc;
        color: #333;
        padding: 40px;
      }

      h2 {
        color: #1a3c6c;
        font-size: 28px;
        margin-bottom: 30px;
        text-align: center;
      }

      .container-fluid {
        max-width: 1200px;
      }

      .form-container {
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      }

      .form-group {
        margin-bottom: 20px;
      }

      .form-group label {
        font-weight: 500;
        color: #1a3c6c;
        margin-bottom: 8px;
        font-size: 16px;
      }

      .form-group input[type="date"] {
        width: 100%;
        padding: 10px;
        border: 1px solid #b0c4de;
        border-radius: 5px;
        font-size: 16px;
        transition: border-color 0.3s;
      }

      .form-group input[type="date"]:focus {
        border-color: #4682b4;
        outline: none;
      }

      .btn-search {
        width: 100%;
        padding: 12px;
        background-color: #4682b4;
        border-color: #4682b4;
        transition: background-color 0.3s;
        margin-bottom: 15px;
      }

      .btn-create {
        width: 100%;
        padding: 12px;
        background-color: #28a745;
        border-color: #28a745;
        transition: background-color 0.3s, transform 0.2s;
        text-decoration: none;
        color: white;
        display: block;
        text-align: center;
        border-radius: 5px;
        font-size: 16px;
      }

      .btn-create:hover {
        background-color: #218838;
        border-color: #218838;
        transform: translateY(-2px);
        color: white;
        text-decoration: none;
      }

      .btn-search:hover {
        background-color: #3a6b9c;
        border-color: #3a6b9c;
      }

      .calendar-container {
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        padding: 20px;
        height: 100%;
      }

      .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background-color: #e6eef5;
        border-radius: 5px 5px 0 0;
        margin-bottom: 15px;
      }

      .calendar-header h3 {
        margin: 0;
        font-size: 20px;
        color: #1a3c6c;
      }

      .calendar-header .btn {
        background-color: #4682b4;
        border-color: #4682b4;
        padding: 8px 15px;
        font-size: 14px;
      }

      .calendar-header .btn:hover {
        background-color: #3a6b9c;
        border-color: #3a6b9c;
      }

      .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 10px;
      }

      .day-header {
        text-align: center;
        font-weight: 500;
        padding: 10px;
        background-color: #e6eef5;
        color: #5e738b;
        border-radius: 5px;
        font-size: 14px;
      }

      .day {
        border: 1px solid #e0e6ed;
        padding: 10px;
        min-height: 100px;
        background-color: #fff;
        border-radius: 5px;
        transition: box-shadow 0.2s;
      }

      .day:hover {
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
      }

      .day-number {
        font-weight: 600;
        color: #1a3c6c;
        margin-bottom: 8px;
        text-align: center;
      }

      .event {
        background-color: #e0f1fa;
        padding: 6px;
        margin: 4px 0;
        border-radius: 4px;
        font-size: 13px;
        color: #34495e;
        border-left: 4px solid #4682b4;
      }

      .event.booked {
        background-color: #fce4e4;
        border-left-color: #d9534f;
      }

      .event.available {
        background-color: #e6f4ea;
        border-left-color: #5cb85c;
      }

      .delete-btn {
        background-color: #d9534f;
        color: white;
        border: none;
        padding: 2px 6px;
        border-radius: 3px;
        cursor: pointer;
        font-size: 12px;
        transition: background-color 0.2s;
      }

      .delete-btn:hover {
        background-color: #c9302c;
      }

        .modal-content {
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        .modal-header {
            background-color: #d9534f;
            color: white;
            border-bottom: none;
        }

        .modal-title {
            font-weight: 500;
        }

        .btn-close {
            filter: invert(1) grayscale(100%) brightness(200%);
        }
    </style>
  </head>
  <body>
    <div class="container-fluid">
      <h2>Doctor Schedules</h2>
      <div class="row">
        <div class="col-md-4">
          <div class="form-container">
            <form>
              <div class="form-group">
                <label for="startDate">Start Date</label>
                <input type="date" id="startDate" class="form-control" asp-for="StartDate" required>
              </div>
              <div class="form-group">
                <label for="endDate">End Date</label>
                <input type="date" id="endDate" class="form-control" asp-for="EndDate" required>
              </div>
              <button type="button" class="btn btn-search" onclick="fetchSchedules()">Search</button>
              <a href="/Schedules/Add" class="btn-create">Create Schedule</a>
            </form>
          </div>
        </div>
        <div class="col-md-8">
          <div id="calendar" class="calendar-container"></div>
        </div>
      </div>
    </div>
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Deletion</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <p>Are you sure you want to delete the following slot?</p>
            <p>
              <strong>Date:</strong>
              <span id="modalDate"></span>
            </p>
            <p>
              <strong>Time:</strong>
              <span id="modalTime"></span>
            </p>
            <p>
              <strong>Slot ID:</strong>
              <span id="modalSlotId"></span>
            </p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
          </div>
        </div>
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <script>
      let currentMonth = new Date();
      // Helper function to convert YYYY-MM-DD to YYYY/MM/DD
      function toSlashFormat(dateStr) {
        return dateStr.replace(/-/g, '/');
      }
      // Helper function to convert Date to YYYY/MM/DD
      function dateToSlashFormat(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}/${month}/${day}`;
      }

      function renderCalendar(startDate, endDate, events = []) {
        const calendarEl = document.getElementById("calendar");
        calendarEl.innerHTML = "";
        const start = new Date(startDate); // Accepts YYYY/MM/DD or YYYY-MM-DD
        const end = new Date(endDate);
        const monthStart = new Date(start.getFullYear(), start.getMonth(), 1);
        const monthEnd = new Date(end.getFullYear(), end.getMonth() + 1, 0);
        const header = document.createElement("div");
        header.className = "calendar-header";
        header.innerHTML = `
                
						<button class="btn btn-primary" onclick="changeMonth(-1)">Previous</button>
						<h3>${monthStart.toLocaleString("default", { month: "long", year: "numeric" })}</h3>
						<button class="btn btn-primary" onclick="changeMonth(1)">Next</button>
            `;
        calendarEl.appendChild(header);
        const grid = document.createElement("div");
        grid.className = "calendar-grid";
        const daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
        daysOfWeek.forEach(day => {
          const dayHeader = document.createElement("div");
          dayHeader.className = "day-header";
          dayHeader.textContent = day;
          grid.appendChild(dayHeader);
        });
        const firstDay = monthStart.getDay();
        for (let i = 0; i < firstDay; i++) {
          const emptyDay = document.createElement("div");
          emptyDay.className = "day";
          grid.appendChild(emptyDay);
        }
        const daysInMonth = monthEnd.getDate();
        for (let day = 1; day <= daysInMonth; day++) {
          const date = new Date(monthStart.getFullYear(), monthStart.getMonth(), day);
          const dateStr = dateToSlashFormat(date); // YYYY/MM/DD
          const dayEl = document.createElement("div");
          dayEl.className = "day";
          dayEl.innerHTML = `
						<div class="day-number">${day}</div>`;
          // Normalize event dates to YYYY/MM/DD
          const dayEvents = events.filter(e => toSlashFormat(e.date) === dateStr);
          dayEvents.forEach(event => {
            const eventEl = document.createElement("div");
            eventEl.className = `event ${event.status.toLowerCase()}`;
            eventEl.innerHTML = `
                        
						<span>${event.startTime} - ${event.endTime} (${event.status})</span>
						<button class="delete-btn" onclick="showDeleteModal(${event.scheduleId}, ${event.slotId}, '${toSlashFormat(event.date)}', '${event.startTime} - ${event.endTime}')">Delete</button>
                    `;
            dayEl.appendChild(eventEl);
          });
          grid.appendChild(dayEl);
        }
        calendarEl.appendChild(grid);
      }

      function changeMonth(delta) {
        currentMonth.setMonth(currentMonth.getMonth() + delta);
        renderCalendar(dateToSlashFormat(currentMonth), dateToSlashFormat(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0)), window.currentEvents || []);
      }

      function fetchSchedules() {
        const startDate = document.getElementById("startDate").value; // YYYY-MM-DD from input
        const endDate = document.getElementById("endDate").value;
        if (!startDate || !endDate) {
          alert("Please fill in all required fields");
          return;
        }
        if (new Date(startDate) > new Date(endDate)) {
          alert("Start date must be before end date");
          return;
        }
        currentMonth = new Date(startDate);
        fetch(`/Schedules/Schedule?handler=GetSchedules&startDate=${startDate}&endDate=${endDate}`, {
          credentials: "include"
        }).then(response => {
          console.log("Fetch response status:", response.status);
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
        }).then(data => {
          console.log("Fetched data:", data);
          const events = data.flatMap(event => event.extendedProps.slots.map(slot => ({
            date: event.start,
            title: event.title,
            startTime: slot.startTime,
            endTime: slot.endTime,
            status: slot.status,
            slotId: slot.slotId,
            scheduleId: slot.scheduleId
          })));
          window.currentEvents = events;
          renderCalendar(toSlashFormat(startDate), toSlashFormat(endDate), events);
        }).catch(error => {
          console.error("Error fetching schedules:", error);
          alert("Failed to load schedules: " + error.message);
        });
      }

      function showDeleteModal(scheduleId, slotId, date, time) {
        deleteScheduleId = scheduleId;
        deleteSlotId = slotId;
        document.getElementById("modalDate").textContent = date;
        document.getElementById("modalTime").textContent = time;
        document.getElementById("modalSlotId").textContent = slotId;
        const modal = new bootstrap.Modal(document.getElementById("deleteConfirmModal"));
        modal.show();
      }

      function deleteSlot(scheduleId, slotId) {
        fetch(`/Schedules/Schedule?handler=DeleteSlot&scheduleId=${scheduleId}&slotId=${slotId}`, {
          method: 'DELETE',
          credentials: "include"
        }).then(response => {
          console.log("Delete response status:", response.status);
          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.text();
        }).then(() => {
          alert("Slot deleted successfully");
          fetchSchedules();
        }).catch(error => {
          console.error("Error deleting slot:", error);
          alert("Failed to delete slot: " + error.message);
        });
      }
      document.addEventListener("DOMContentLoaded", function() {
        renderCalendar(toSlashFormat("@Model.StartDate.ToString("yyyy-MM-dd ")"), toSlashFormat("@Model.EndDate.ToString("yyyy-MM-dd ")"));
        document.getElementById("confirmDeleteBtn").addEventListener("click", function() {
          const modal = bootstrap.Modal.getInstance(document.getElementById("deleteConfirmModal"));
          modal.hide();
          if (deleteScheduleId !== null && deleteSlotId !== null) {
            deleteSlot(deleteScheduleId, deleteSlotId);
            deleteScheduleId = null;
            deleteSlotId = null;
          }
        });
      });
    </script>
  </body>
</html>